{"ast":null,"code":"import _defineProperty from \"/home/weston/Documents/movedb/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { MEDIA_POPULAR, MOVIE_POPULAR, TV_POPULAR, PEOPLE_POPULAR, IS_MOVIE_IMAGE_LOADED, IS_TV_IMAGE_LOADED, IS_PERSON_IMAGE_LOADED, ERROR } from '../Actions/types';\nvar INITIAL_STATE = {\n  media_popular: [{\n    \"id\": '',\n    \"vote_count\": '',\n    \"title\": '',\n    \"release_date\": '',\n    \"original_title\": '',\n    \"backdrop_path\": '',\n    \"poster_path\": '',\n    \"media_type\": '',\n    \"loading\": true\n  }],\n  movie_popular: [{\n    \"id\": '',\n    \"vote_count\": '',\n    \"title\": '',\n    \"release_date\": '',\n    \"original_title\": '',\n    \"backdrop_path\": '',\n    \"poster_path\": '',\n    \"media_type\": '',\n    \"loading\": true\n  }],\n  tv_popular: [{\n    \"id\": '',\n    \"vote_count\": '',\n    \"name\": '',\n    \"release_date\": '',\n    \"original_title\": '',\n    \"backdrop_path\": '',\n    \"poster_path\": '',\n    \"media_type\": '',\n    \"loading\": true\n  }],\n  people_popular: [{\n    \"id\": '',\n    \"profile_path\": '',\n    \"name\": '',\n    \"media_type\": '',\n    \"loading\": true\n  }],\n  error: ''\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case MEDIA_POPULAR:\n      //arrays to set variables\n      var mediaArray = [];\n      var mediaLoadingArray = []; //creat new media array\n\n      for (var i = 0; i < action.payload.results.length; i++) {\n        mediaArray.push(action.payload.results[i]);\n      } //create array for loading\n\n\n      for (var j = 0; j < action.payload.results.length; j++) {\n        var value = true;\n        mediaLoadingArray.push({\n          \"loading\": value\n        });\n      } //Join the two arrays by keys\n\n\n      var mediaResults = mediaArray.map(function (e) {\n        for (var _i = 0, _mediaLoadingArray = mediaLoadingArray; _i < _mediaLoadingArray.length; _i++) {\n          var element = _mediaLoadingArray[_i];\n          if (e.a === element.a) Object.assign(e, element);\n        }\n\n        return e;\n      });\n      return _objectSpread({}, state, {\n        media_popular: mediaResults\n      });\n\n    case MOVIE_POPULAR:\n      //arrays to set variables\n      var movieArray = [];\n      var movieLoadingArray = []; //creat new media array\n\n      for (var _i2 = 0; _i2 < action.payload.results.length; _i2++) {\n        movieArray.push(action.payload.results[_i2]);\n      } //create array for loading\n\n\n      for (var _j = 0; _j < action.payload.results.length; _j++) {\n        var _value = false;\n        movieLoadingArray.push({\n          \"loading\": _value\n        });\n      } //Join the two arrays by keys\n\n\n      var movieResult = movieArray.map(function (e) {\n        for (var _i3 = 0, _movieLoadingArray = movieLoadingArray; _i3 < _movieLoadingArray.length; _i3++) {\n          var element = _movieLoadingArray[_i3];\n          if (e.a === element.a) Object.assign(e, element);\n        }\n\n        return e;\n      });\n      return _objectSpread({}, state, {\n        movie_popular: movieResult\n      });\n\n    case TV_POPULAR:\n      //arrays to set variables\n      var tvArray = [];\n      var tvLoadingArray = []; //creat new media array\n\n      for (var _i4 = 0; _i4 < action.payload.results.length; _i4++) {\n        tvArray.push(action.payload.results[_i4]);\n      } //create array for loading\n\n\n      for (var _j2 = 0; _j2 < action.payload.results.length; _j2++) {\n        var _value2 = true;\n        tvLoadingArray.push({\n          \"loading\": _value2\n        });\n      } //Join the two arrays by keys\n\n\n      var tvResults = tvArray.map(function (e) {\n        for (var _i5 = 0, _tvLoadingArray = tvLoadingArray; _i5 < _tvLoadingArray.length; _i5++) {\n          var element = _tvLoadingArray[_i5];\n          if (e.a === element.a) Object.assign(e, element);\n        }\n\n        return e;\n      });\n      return _objectSpread({}, state, {\n        tv_popular: tvResults\n      });\n\n    case PEOPLE_POPULAR:\n      //arrays to set variables\n      var personArray = [];\n      var personLoadingArray = []; //creat new media array\n\n      for (var _i6 = 0; _i6 < action.payload.results.length; _i6++) {\n        personArray.push(action.payload.results[_i6]);\n      } //create array for loading\n\n\n      for (var _j3 = 0; _j3 < action.payload.results.length; _j3++) {\n        var _value3 = true;\n        personLoadingArray.push({\n          \"loading\": _value3\n        });\n      } //Join the two arrays by keys\n\n\n      var personResults = personArray.map(function (e) {\n        for (var _i7 = 0, _personLoadingArray = personLoadingArray; _i7 < _personLoadingArray.length; _i7++) {\n          var element = _personLoadingArray[_i7];\n          if (e.a === element.a) Object.assign(e, element);\n        }\n\n        return e;\n      });\n      return _objectSpread({}, state, {\n        people_popular: personResults\n      });\n\n    case IS_MOVIE_IMAGE_LOADED:\n      var newMovieArray = [];\n      var movieImageLoadingArray = []; //creat new media array\n\n      for (var _i8 = 0; _i8 < state.movie_popular.length; _i8++) {\n        newMovieArray.push(state.movie_popular[_i8]);\n      } //create array for loading\n\n\n      for (var _j4 = 0; _j4 < state.movie_popular.length; _j4++) {\n        var _value4 = false;\n        movieImageLoadingArray.push({\n          \"loading\": _value4\n        });\n      } //Join the two arrays by keys\n\n\n      var movieLoadingResults = newMovieArray.map(function (e) {\n        for (var _i9 = 0, _movieImageLoadingArr = movieImageLoadingArray; _i9 < _movieImageLoadingArr.length; _i9++) {\n          var element = _movieImageLoadingArr[_i9];\n          if (e.a === element.a) Object.assign(e, element);\n        }\n\n        return e;\n      });\n      return _objectSpread({}, state, {\n        movie_popular: movieLoadingResults\n      });\n\n    case IS_TV_IMAGE_LOADED:\n      var newTvArray = [];\n      var tvImageLoadingArray = []; //creat new media array\n\n      for (var _i10 = 0; _i10 < state.movie_popular.length; _i10++) {\n        newTvArray.push(state.movie_popular[_i10]);\n      } //create array for loading\n\n\n      for (var _j5 = 0; _j5 < state.movie_popular.length; _j5++) {\n        var _value5 = false;\n        tvImageLoadingArray.push({\n          \"loading\": _value5\n        });\n      } //Join the two arrays by keys\n\n\n      var tvLoadingResults = newTvArray.map(function (e) {\n        for (var _i11 = 0, _tvImageLoadingArray = tvImageLoadingArray; _i11 < _tvImageLoadingArray.length; _i11++) {\n          var element = _tvImageLoadingArray[_i11];\n          if (e.a === element.a) Object.assign(e, element);\n        }\n\n        return e;\n      });\n      return _objectSpread({}, state, {\n        tv_popular: tvLoadingResults\n      });\n\n    case IS_PERSON_IMAGE_LOADED:\n      var newPersonArray = [];\n      var personImageLoadingArray = []; //creat new media array\n\n      for (var _i12 = 0; _i12 < state.people_popular.length; _i12++) {\n        newPersonArray.push(state.people_popular[_i12]);\n      } //create array for loading\n\n\n      for (var _j6 = 0; _j6 < state.people_popular.length; _j6++) {\n        var _value6 = false;\n        personImageLoadingArray.push({\n          \"loading\": _value6\n        });\n      } //Join the two arrays by keys\n\n\n      var personLoadingResults = newPersonArray.map(function (e) {\n        for (var _i13 = 0, _personImageLoadingAr = personImageLoadingArray; _i13 < _personImageLoadingAr.length; _i13++) {\n          var element = _personImageLoadingAr[_i13];\n          if (e.a === element.a) Object.assign(e, element);\n        }\n\n        return e;\n      });\n      return _objectSpread({}, state, {\n        people_popular: personLoadingResults\n      });\n\n    case ERROR:\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/weston/Documents/movedb/Client/src/Reducers/homeReducer.js"],"names":["MEDIA_POPULAR","MOVIE_POPULAR","TV_POPULAR","PEOPLE_POPULAR","IS_MOVIE_IMAGE_LOADED","IS_TV_IMAGE_LOADED","IS_PERSON_IMAGE_LOADED","ERROR","INITIAL_STATE","media_popular","movie_popular","tv_popular","people_popular","error","state","action","type","mediaArray","mediaLoadingArray","i","payload","results","length","push","j","value","mediaResults","map","e","element","a","Object","assign","movieArray","movieLoadingArray","movieResult","tvArray","tvLoadingArray","tvResults","personArray","personLoadingArray","personResults","newMovieArray","movieImageLoadingArray","movieLoadingResults","newTvArray","tvImageLoadingArray","tvLoadingResults","newPersonArray","personImageLoadingArray","personLoadingResults"],"mappings":"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","sourcesContent":["import { MEDIA_POPULAR, MOVIE_POPULAR, TV_POPULAR, PEOPLE_POPULAR,\n    IS_MOVIE_IMAGE_LOADED, IS_TV_IMAGE_LOADED, IS_PERSON_IMAGE_LOADED,  ERROR } from '../Actions/types'\n\nconst INITIAL_STATE =  {\n    media_popular:[\n            {\n            \"id\": '',\n            \"vote_count\": '',\n            \"title\": '',\n            \"release_date\": '',\n            \"original_title\": '',\n            \"backdrop_path\": '',\n            \"poster_path\": '',\n            \"media_type\": '',\n            \"loading\": true\n            },\n        ], \n    movie_popular:[\n            {\n                \"id\": '',\n                \"vote_count\": '',\n                \"title\": '',\n                \"release_date\": '',\n                \"original_title\": '',\n                \"backdrop_path\": '',\n                \"poster_path\": '',\n                \"media_type\": '',\n                \"loading\": true,\n            },\n        ],\n    tv_popular:[\n            {\n                \"id\": '',\n                \"vote_count\": '',\n                \"name\": '',\n                \"release_date\": '',\n                \"original_title\": '',\n                \"backdrop_path\": '',\n                \"poster_path\": '',\n                \"media_type\": '',\n                \"loading\": true,\n            },\n        ],\n    people_popular:[\n            {\n            \"id\": '',\n            \"profile_path\": '',\n            \"name\": '',\n            \"media_type\": '',\n            \"loading\": true\n            },\n        ],\n    error: '',\n};\n\nexport default (state = INITIAL_STATE, action) => {\n\n    switch (action.type){\n        case MEDIA_POPULAR:\n                //arrays to set variables\n                const mediaArray = []\n                const mediaLoadingArray = []\n                //creat new media array\n                for ( let i = 0; i < action.payload.results.length; i++) {\n                    mediaArray.push(action.payload.results[i])\n                  }\n                  //create array for loading\n                for ( let j = 0; j < action.payload.results.length; j++) {\n                    const value = true;\n                    mediaLoadingArray.push({\"loading\": value})\n                }\n                  //Join the two arrays by keys\n                let mediaResults = mediaArray.map((e) => {\n                    for(let element of mediaLoadingArray){\n                        if(e.a === element.a) Object.assign(e, element);\n                    }\n                    return e;\n                });   \n            return{ ...state, media_popular: mediaResults }\n\n\n        case MOVIE_POPULAR:\n                //arrays to set variables\n                const movieArray = []\n                const movieLoadingArray = []\n                //creat new media array\n                for ( let i = 0; i < action.payload.results.length; i++) {\n                    movieArray.push(action.payload.results[i])\n                  }\n                  //create array for loading\n                for ( let j = 0; j < action.payload.results.length; j++) {\n                    const value = false;\n                    movieLoadingArray.push({\"loading\": value })\n                }\n                //Join the two arrays by keys\n                let movieResult = movieArray.map((e) => {\n                    for(let element of movieLoadingArray){\n                        if(e.a === element.a) Object.assign(e, element);\n                    }\n                    return e;\n                });\n            return{ ...state, movie_popular: movieResult }\n\n\n        case TV_POPULAR:\n                //arrays to set variables\n                const tvArray = []\n                const tvLoadingArray = []\n                //creat new media array\n                for ( let i = 0; i < action.payload.results.length; i++) {\n                    tvArray.push(action.payload.results[i])\n                  }\n                  //create array for loading\n                for ( let j = 0; j < action.payload.results.length; j++) {\n                    const value = true;\n                    tvLoadingArray.push({\"loading\": value})\n                }\n                  //Join the two arrays by keys\n                let tvResults = tvArray.map((e) => {\n                    for(let element of tvLoadingArray){\n                        if(e.a === element.a) Object.assign(e, element);\n                    }\n                    return e;\n                });                \n            return{ ...state, tv_popular: tvResults }\n\n\n        case PEOPLE_POPULAR:\n                //arrays to set variables\n                const personArray = []\n                const personLoadingArray = []\n                //creat new media array\n                for ( let i = 0; i < action.payload.results.length; i++) {\n                    personArray.push(action.payload.results[i])\n                  }\n                  //create array for loading\n                for ( let j = 0; j < action.payload.results.length; j++) {\n                    const value = true;\n                    personLoadingArray.push({\"loading\": value})\n                }\n                  //Join the two arrays by keys\n                let personResults = personArray.map((e) => {\n                    for(let element of personLoadingArray){\n                        if(e.a === element.a) Object.assign(e, element);\n                    }\n                    return e;\n                });   \n                return{ ...state, people_popular: personResults }\n\n\n        case IS_MOVIE_IMAGE_LOADED:\n                const newMovieArray = []\n                const movieImageLoadingArray = []\n            //creat new media array\n            for ( let i = 0; i < state.movie_popular.length; i++) {\n                newMovieArray.push(state.movie_popular[i])\n            }\n            //create array for loading\n            for ( let j = 0; j < state.movie_popular.length; j++) {\n                const value = false;\n                movieImageLoadingArray.push({\"loading\": value })\n            }\n             //Join the two arrays by keys\n             let movieLoadingResults = newMovieArray.map((e) => {\n                for(let element of movieImageLoadingArray){\n                    if(e.a === element.a) Object.assign(e, element);\n                }\n                return e;\n            });   \n\n            return{ ...state, movie_popular: movieLoadingResults  }\n\n\n        case IS_TV_IMAGE_LOADED:\n                const newTvArray = []\n                const tvImageLoadingArray = []\n            //creat new media array\n            for ( let i = 0; i < state.movie_popular.length; i++) {\n                newTvArray.push(state.movie_popular[i])\n            }\n            //create array for loading\n            for ( let j = 0; j < state.movie_popular.length; j++) {\n                const value = false;\n                tvImageLoadingArray.push({\"loading\": value })\n            }\n             //Join the two arrays by keys\n             let tvLoadingResults = newTvArray.map((e) => {\n                for(let element of tvImageLoadingArray){\n                    if(e.a === element.a) Object.assign(e, element);\n                }\n                return e;\n            });   \n            return{ ...state, tv_popular: tvLoadingResults }\n\n\n        case IS_PERSON_IMAGE_LOADED:\n                const newPersonArray = []\n                const personImageLoadingArray = []\n            //creat new media array\n            for ( let i = 0; i < state.people_popular.length; i++) {\n                newPersonArray.push(state.people_popular[i])\n            }\n            //create array for loading\n            for ( let j = 0; j < state.people_popular.length; j++) {\n                const value = false;\n                personImageLoadingArray.push({\"loading\": value })\n            }\n             //Join the two arrays by keys\n             let personLoadingResults = newPersonArray.map((e) => {\n                for(let element of personImageLoadingArray){\n                    if(e.a === element.a) Object.assign(e, element);\n                }\n                return e;\n            });   \n            return{ ...state, people_popular: personLoadingResults }\n\n\n        case ERROR:\n            return{ ...state, error: action.payload }\n        default:\n         return state;\n    } \n    \n};"]},"metadata":{},"sourceType":"module"}