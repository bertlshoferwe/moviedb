{"ast":null,"code":"import _defineProperty from \"/home/weston/Documents/movedb/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { MEDIA_POPULAR, MOVIE_POPULAR, TV_POPULAR, PEOPLE_POPULAR, IS_MOVIE_IMAGE_LOADED, IS_TV_IMAGE_LOADED, IS_PERSON_IMAGE_LOADED, ERROR } from '../Actions/types';\nvar INITIAL_STATE = {\n  media_popular: [{\n    \"id\": '',\n    \"vote_count\": '',\n    \"title\": '',\n    \"release_date\": '',\n    \"original_title\": '',\n    \"backdrop_path\": '',\n    \"poster_path\": '',\n    \"media_type\": '',\n    \"loading\": true\n  }],\n  movie_popular: [{\n    \"id\": '',\n    \"vote_count\": '',\n    \"title\": '',\n    \"release_date\": '',\n    \"original_title\": '',\n    \"backdrop_path\": '',\n    \"poster_path\": '',\n    \"media_type\": '',\n    \"loading\": true\n  }],\n  tv_popular: [{\n    \"id\": '',\n    \"vote_count\": '',\n    \"name\": '',\n    \"release_date\": '',\n    \"original_title\": '',\n    \"backdrop_path\": '',\n    \"poster_path\": '',\n    \"media_type\": '',\n    \"loading\": true\n  }],\n  people_popular: [{\n    \"id\": '',\n    \"profile_path\": '',\n    \"name\": '',\n    \"media_type\": '',\n    \"loading\": true\n  }],\n  error: ''\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var mediaArray2 = [];\n  var movieArray = [];\n  var tvArray = [];\n  var pArray = [];\n\n  function createArray(type, arr) {\n    for (var i = 0; i < arr.length; i++) {\n      var arrayName = type + 'array2';\n      arrayName.push(arr[i]);\n    }\n  }\n\n  switch (action.type) {\n    case MEDIA_POPULAR:\n      //arrays to set variables\n      createArray('media', action.payload.results); // const mediaArray = []\n\n      var mediaLoadingArray = []; //creat new media array\n      // for ( let i = 0; i < action.payload.results.length; i++) {\n      //     mediaArray.push(action.payload.results[i])\n      //   }\n      //create array for loading\n\n      for (var j = 0; j < action.payload.results.length; j++) {\n        var value = true;\n        mediaLoadingArray.push({\n          \"loading\": value\n        });\n      } //Join the two arrays by keys\n\n\n      var mediaResults = mediaArray2.map(function (e) {\n        for (var _i = 0, _mediaLoadingArray = mediaLoadingArray; _i < _mediaLoadingArray.length; _i++) {\n          var element = _mediaLoadingArray[_i];\n          if (e.a === element.a) Object.assign(e, element);\n        }\n\n        return e;\n      });\n      return _objectSpread({}, state, {\n        media_popular: mediaResults\n      });\n\n    case MOVIE_POPULAR:\n      //arrays to set variables\n      var _movieArray = [];\n      var movieLoadingArray = []; //creat new media array\n\n      for (var i = 0; i < action.payload.results.length; i++) {\n        _movieArray.push(action.payload.results[i]);\n      } //create array for loading\n\n\n      for (var _j = 0; _j < action.payload.results.length; _j++) {\n        var _value = true;\n        movieLoadingArray.push({\n          \"loading\": _value\n        });\n      } //Join the two arrays by keys\n\n\n      var movieResult = _movieArray.map(function (e) {\n        for (var _i2 = 0, _movieLoadingArray = movieLoadingArray; _i2 < _movieLoadingArray.length; _i2++) {\n          var element = _movieLoadingArray[_i2];\n          if (e.a === element.a) Object.assign(e, element);\n        }\n\n        return e;\n      });\n\n      return _objectSpread({}, state, {\n        movie_popular: movieResult\n      });\n\n    case TV_POPULAR:\n      //arrays to set variables\n      var _tvArray = [];\n      var tvLoadingArray = []; //creat new media array\n\n      for (var _i3 = 0; _i3 < action.payload.results.length; _i3++) {\n        _tvArray.push(action.payload.results[_i3]);\n      } //create array for loading\n\n\n      for (var _j2 = 0; _j2 < action.payload.results.length; _j2++) {\n        var _value2 = true;\n        tvLoadingArray.push({\n          \"loading\": _value2\n        });\n      } //Join the two arrays by keys\n\n\n      var tvResults = _tvArray.map(function (e) {\n        for (var _i4 = 0, _tvLoadingArray = tvLoadingArray; _i4 < _tvLoadingArray.length; _i4++) {\n          var element = _tvLoadingArray[_i4];\n          if (e.a === element.a) Object.assign(e, element);\n        }\n\n        return e;\n      });\n\n      return _objectSpread({}, state, {\n        tv_popular: tvResults\n      });\n\n    case PEOPLE_POPULAR:\n      //arrays to set variables\n      var personArray = [];\n      var personLoadingArray = []; //creat new media array\n\n      for (var _i5 = 0; _i5 < action.payload.results.length; _i5++) {\n        personArray.push(action.payload.results[_i5]);\n      } //create array for loading\n\n\n      for (var _j3 = 0; _j3 < action.payload.results.length; _j3++) {\n        var _value3 = true;\n        personLoadingArray.push({\n          \"loading\": _value3\n        });\n      } //Join the two arrays by keys\n\n\n      var personResults = personArray.map(function (e) {\n        for (var _i6 = 0, _personLoadingArray = personLoadingArray; _i6 < _personLoadingArray.length; _i6++) {\n          var element = _personLoadingArray[_i6];\n          if (e.a === element.a) Object.assign(e, element);\n        }\n\n        return e;\n      });\n      return _objectSpread({}, state, {\n        people_popular: personResults\n      });\n\n    case IS_MOVIE_IMAGE_LOADED:\n      return _objectSpread({}, state);\n    // case IS_TV_IMAGE_LOADED:\n    //     return{ ...state, tv_popular:state.tv_popular[action.index].push(['loading'=action.payload])}\n    // case IS_PERSON_IMAGE_LOADED:\n    //     return{ ...state, people_popular:state.people_popular[action.index].push(['loading'=action.payload]) }\n\n    case ERROR:\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/weston/Documents/movedb/Client/src/Reducers/homeReducer.js"],"names":["MEDIA_POPULAR","MOVIE_POPULAR","TV_POPULAR","PEOPLE_POPULAR","IS_MOVIE_IMAGE_LOADED","IS_TV_IMAGE_LOADED","IS_PERSON_IMAGE_LOADED","ERROR","INITIAL_STATE","media_popular","movie_popular","tv_popular","people_popular","error","state","action","mediaArray2","movieArray","tvArray","pArray","createArray","type","arr","i","length","arrayName","push","payload","results","mediaLoadingArray","j","value","mediaResults","map","e","element","a","Object","assign","movieLoadingArray","movieResult","tvLoadingArray","tvResults","personArray","personLoadingArray","personResults"],"mappings":"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","sourcesContent":["import { MEDIA_POPULAR, MOVIE_POPULAR, TV_POPULAR, PEOPLE_POPULAR,\n    IS_MOVIE_IMAGE_LOADED, IS_TV_IMAGE_LOADED, IS_PERSON_IMAGE_LOADED,  ERROR } from '../Actions/types'\n\nconst INITIAL_STATE =  {\n    media_popular:[\n            {\n            \"id\": '',\n            \"vote_count\": '',\n            \"title\": '',\n            \"release_date\": '',\n            \"original_title\": '',\n            \"backdrop_path\": '',\n            \"poster_path\": '',\n            \"media_type\": '',\n            \"loading\": true\n            },\n        ], \n    movie_popular:[\n            {\n                \"id\": '',\n                \"vote_count\": '',\n                \"title\": '',\n                \"release_date\": '',\n                \"original_title\": '',\n                \"backdrop_path\": '',\n                \"poster_path\": '',\n                \"media_type\": '',\n                \"loading\": true,\n            },\n        ],\n    tv_popular:[\n            {\n                \"id\": '',\n                \"vote_count\": '',\n                \"name\": '',\n                \"release_date\": '',\n                \"original_title\": '',\n                \"backdrop_path\": '',\n                \"poster_path\": '',\n                \"media_type\": '',\n                \"loading\": true,\n            },\n        ],\n    people_popular:[\n            {\n            \"id\": '',\n            \"profile_path\": '',\n            \"name\": '',\n            \"media_type\": '',\n            \"loading\": true\n            },\n        ],\n    error: '',\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    let mediaArray2 = []\n    let movieArray = []\n    let tvArray = []\n    let pArray = []\n    \n    function createArray(type,arr) {\n        for ( let i = 0; i < arr.length; i++) {\n            const arrayName = type + 'array2' \n            arrayName.push(arr[i])\n          }\n        }\n\n    switch (action.type){\n        case MEDIA_POPULAR:\n                //arrays to set variables\n                createArray('media', action.payload.results)\n                // const mediaArray = []\n                const mediaLoadingArray = []\n                //creat new media array\n                // for ( let i = 0; i < action.payload.results.length; i++) {\n                //     mediaArray.push(action.payload.results[i])\n                //   }\n                  //create array for loading\n                for ( let j = 0; j < action.payload.results.length; j++) {\n                    const value = true;\n                    mediaLoadingArray.push({\"loading\": value})\n                }\n                  //Join the two arrays by keys\n                let mediaResults = mediaArray2.map((e) => {\n                    for(let element of mediaLoadingArray){\n                        if(e.a === element.a) Object.assign(e, element);\n                    }\n                    return e;\n                });   \n            return{ ...state, media_popular: mediaResults }\n        case MOVIE_POPULAR:\n                //arrays to set variables\n                const movieArray = []\n                const movieLoadingArray = []\n                //creat new media array\n                for ( let i = 0; i < action.payload.results.length; i++) {\n                    movieArray.push(action.payload.results[i])\n                  }\n                  //create array for loading\n                for ( let j = 0; j < action.payload.results.length; j++) {\n                    const value = true;\n                    movieLoadingArray.push({\"loading\": value})\n                }\n                //Join the two arrays by keys\n                let movieResult = movieArray.map((e) => {\n                    for(let element of movieLoadingArray){\n                        if(e.a === element.a) Object.assign(e, element);\n                    }\n                    return e;\n                });\n            return{ ...state, movie_popular: movieResult }\n        case TV_POPULAR:\n                //arrays to set variables\n                const tvArray = []\n                const tvLoadingArray = []\n                //creat new media array\n                for ( let i = 0; i < action.payload.results.length; i++) {\n                    tvArray.push(action.payload.results[i])\n                  }\n                  //create array for loading\n                for ( let j = 0; j < action.payload.results.length; j++) {\n                    const value = true;\n                    tvLoadingArray.push({\"loading\": value})\n                }\n                  //Join the two arrays by keys\n                let tvResults = tvArray.map((e) => {\n                    for(let element of tvLoadingArray){\n                        if(e.a === element.a) Object.assign(e, element);\n                    }\n                    return e;\n                });                \n            return{ ...state, tv_popular: tvResults }\n        case PEOPLE_POPULAR:\n                //arrays to set variables\n                const personArray = []\n                const personLoadingArray = []\n                //creat new media array\n                for ( let i = 0; i < action.payload.results.length; i++) {\n                    personArray.push(action.payload.results[i])\n                  }\n                  //create array for loading\n                for ( let j = 0; j < action.payload.results.length; j++) {\n                    const value = true;\n                    personLoadingArray.push({\"loading\": value})\n                }\n                  //Join the two arrays by keys\n                let personResults = personArray.map((e) => {\n                    for(let element of personLoadingArray){\n                        if(e.a === element.a) Object.assign(e, element);\n                    }\n                    return e;\n                });   \n                return{ ...state, people_popular: personResults }\n        case IS_MOVIE_IMAGE_LOADED:\n            return{ ...state,  }\n        // case IS_TV_IMAGE_LOADED:\n        //     return{ ...state, tv_popular:state.tv_popular[action.index].push(['loading'=action.payload])}\n        // case IS_PERSON_IMAGE_LOADED:\n        //     return{ ...state, people_popular:state.people_popular[action.index].push(['loading'=action.payload]) }\n        case ERROR:\n            return{ ...state, error: action.payload }\n        default:\n         return state;\n    } \n    \n};"]},"metadata":{},"sourceType":"module"}