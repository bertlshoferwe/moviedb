{"ast":null,"code":"import _defineProperty from \"/home/weston/Documents/movedb/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { MEDIA_POPULAR, MOVIE_POPULAR, TV_POPULAR, PEOPLE_POPULAR, IS_MOVIE_IMAGE_LOADED, IS_TV_IMAGE_LOADED, IS_PERSON_IMAGE_LOADED, ERROR } from '../Actions/types';\nvar INITIAL_STATE = {\n  media_popular: [{\n    \"id\": '',\n    \"vote_count\": '',\n    \"title\": '',\n    \"release_date\": '',\n    \"original_title\": '',\n    \"backdrop_path\": '',\n    \"poster_path\": '',\n    \"media_type\": '',\n    \"loading\": true\n  }],\n  movie_popular: [{\n    \"id\": '',\n    \"vote_count\": '',\n    \"title\": '',\n    \"release_date\": '',\n    \"original_title\": '',\n    \"backdrop_path\": '',\n    \"poster_path\": '',\n    \"media_type\": '',\n    \"loading\": true\n  }],\n  tv_popular: [{\n    \"id\": '',\n    \"vote_count\": '',\n    \"name\": '',\n    \"release_date\": '',\n    \"original_title\": '',\n    \"backdrop_path\": '',\n    \"poster_path\": '',\n    \"media_type\": '',\n    \"loading\": true\n  }],\n  people_popular: [{\n    \"id\": '',\n    \"profile_path\": '',\n    \"name\": '',\n    \"media_type\": '',\n    \"loading\": true\n  }],\n  homeError: ''\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    //obtains image from fetch in action\n    case MEDIA_POPULAR:\n      //arrays to set variables\n      var newMediaPopularArray = [];\n      var mediaLoadingArray = []; //creat new media_popular array\n\n      for (var i = 0; i < action.payload.results.length; i++) {\n        newMediaPopularArray.push(action.payload.results[i]);\n      } //create array for loading variable\n\n\n      for (var j = 0; j < action.payload.results.length; j++) {\n        var value = true;\n        mediaLoadingArray.push({\n          \"loading\": value\n        });\n      } //Join the two arrays by alike keys\n\n\n      var mediaPopularResults = newMediaPopularArray.map(function (e) {\n        for (var _i = 0, _mediaLoadingArray = mediaLoadingArray; _i < _mediaLoadingArray.length; _i++) {\n          var element = _mediaLoadingArray[_i];\n          if (e.a === element.a) Object.assign(e, element);\n        }\n\n        return e;\n      });\n      return _objectSpread({}, state, {\n        media_popular: mediaPopularResults\n      });\n\n    case MOVIE_POPULAR:\n      return _objectSpread({}, state, {\n        movie_popular: action.payload\n      });\n\n    case TV_POPULAR:\n      return _objectSpread({}, state, {\n        tv_popular: action.payload\n      });\n\n    case PEOPLE_POPULAR:\n      return _objectSpread({}, state, {\n        people_popular: action.payload //changes loading to false upon onload in coverItems.js\n\n      });\n\n    case IS_MOVIE_IMAGE_LOADED:\n      return _objectSpread({}, state);\n\n    case IS_TV_IMAGE_LOADED:\n      return _objectSpread({}, state);\n\n    case IS_PERSON_IMAGE_LOADED:\n      return _objectSpread({}, state);\n    //incase of any error retrieving fetch info in action\n\n    case ERROR:\n      return _objectSpread({}, state, {\n        homeError: action.payload\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/weston/Documents/movedb/Client/src/Reducers/homeReducer.js"],"names":["MEDIA_POPULAR","MOVIE_POPULAR","TV_POPULAR","PEOPLE_POPULAR","IS_MOVIE_IMAGE_LOADED","IS_TV_IMAGE_LOADED","IS_PERSON_IMAGE_LOADED","ERROR","INITIAL_STATE","media_popular","movie_popular","tv_popular","people_popular","homeError","state","action","type","newMediaPopularArray","mediaLoadingArray","i","payload","results","length","push","j","value","mediaPopularResults","map","e","element","a","Object","assign"],"mappings":"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","sourcesContent":["import { MEDIA_POPULAR, MOVIE_POPULAR, TV_POPULAR, PEOPLE_POPULAR,\n    IS_MOVIE_IMAGE_LOADED, IS_TV_IMAGE_LOADED, IS_PERSON_IMAGE_LOADED,  ERROR } from '../Actions/types'\n\nconst INITIAL_STATE =  {\n    media_popular:[\n            {\n            \"id\": '',\n            \"vote_count\": '',\n            \"title\": '',\n            \"release_date\": '',\n            \"original_title\": '',\n            \"backdrop_path\": '',\n            \"poster_path\": '',\n            \"media_type\": '',\n            \"loading\": true\n            },\n        ], \n    movie_popular:[\n            {\n                \"id\": '',\n                \"vote_count\": '',\n                \"title\": '',\n                \"release_date\": '',\n                \"original_title\": '',\n                \"backdrop_path\": '',\n                \"poster_path\": '',\n                \"media_type\": '',\n                \"loading\": true,\n            },\n        ],\n    tv_popular:[\n            {\n                \"id\": '',\n                \"vote_count\": '',\n                \"name\": '',\n                \"release_date\": '',\n                \"original_title\": '',\n                \"backdrop_path\": '',\n                \"poster_path\": '',\n                \"media_type\": '',\n                \"loading\": true,\n            },\n        ],\n    people_popular:[\n            {\n            \"id\": '',\n            \"profile_path\": '',\n            \"name\": '',\n            \"media_type\": '',\n            \"loading\": true\n            },\n        ],\n    homeError: '',\n};\n\nexport default (state = INITIAL_STATE, action) => {\n\n    switch (action.type){\n    //obtains image from fetch in action\n        case MEDIA_POPULAR:\n                //arrays to set variables\n                const newMediaPopularArray = []\n                const mediaLoadingArray = []\n                //creat new media_popular array\n                for ( let i = 0; i < action.payload.results.length; i++) {\n                    newMediaPopularArray.push(action.payload.results[i])\n                  }\n                  //create array for loading variable\n                for ( let j = 0; j < action.payload.results.length; j++) {\n                    const value = true;\n                    mediaLoadingArray.push({\"loading\": value})\n                }\n                  //Join the two arrays by alike keys\n                let mediaPopularResults = newMediaPopularArray.map((e) => {\n                    for(let element of mediaLoadingArray){\n                        if(e.a === element.a) Object.assign(e, element);\n                    }\n                    return e;\n                });   \n            return{ ...state, media_popular: mediaPopularResults }\n\n\n        case MOVIE_POPULAR:\n            return{ ...state, movie_popular: action.payload }\n\n\n        case TV_POPULAR:        \n            return{ ...state, tv_popular: action.payload }\n\n\n        case PEOPLE_POPULAR:\n                \n                return{ ...state, people_popular: action.payload }\n\n    //changes loading to false upon onload in coverItems.js\n        case IS_MOVIE_IMAGE_LOADED:\n\n            return{ ...state  }\n\n\n        case IS_TV_IMAGE_LOADED:\n            return{ ...state  }\n\n\n        case IS_PERSON_IMAGE_LOADED:\n            return{ ...state }\n\n    //incase of any error retrieving fetch info in action\n        case ERROR:\n            return{ ...state, homeError: action.payload }\n        default:\n         return state;\n    } \n    \n};"]},"metadata":{},"sourceType":"module"}