{"ast":null,"code":"import _classCallCheck from \"/home/weston/Documents/movedb/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/weston/Documents/movedb/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/weston/Documents/movedb/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/weston/Documents/movedb/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/weston/Documents/movedb/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/weston/Documents/movedb/Client/src/components/Common/coverItems.js\";\nimport React, { Component } from 'react';\nimport { Card, CardMedia, CardContent, Typography } from '@material-ui/core';\nimport '../../style.scss';\n\nvar CoverItems =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CoverItems, _Component);\n\n  function CoverItems(props) {\n    var _this;\n\n    _classCallCheck(this, CoverItems);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CoverItems).call(this, props));\n    _this.state = {\n      imageUrl: 'https://image.tmdb.org/t/p/w500'\n    };\n    return _this;\n  }\n\n  _createClass(CoverItems, [{\n    key: \"render\",\n    value: function render() {\n      var imageUrl = this.state.imageUrl;\n      var results = [];\n\n      for (var i = 0; i < this.props.data.length; i++) {\n        // to show or not to show the overlay\n        var movieOverlay = this.props.overlay ? React.createElement(CardContent, {\n          className: \"CardOverlay\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"material-icons movieIcon \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, \"movie\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          variant: \"body1\",\n          className: \"overlayText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, this.props.data[i].title))) : React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        });\n        var tvOverlay = this.props.overlay ? React.createElement(CardContent, {\n          className: \"CardOverlay\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"material-icons tvIcon \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, \"tv\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          variant: \"body1\",\n          className: \"overlayText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, this.props.data[i].name))) : React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        });\n        var personOverlay = this.props.overlay ? React.createElement(CardContent, {\n          className: \"CardOverlay\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"material-icons personIcon \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, \"person\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          variant: \"body1\",\n          className: \"overlayText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, this.props.data[i].name))) : React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }); // to display poster or backdrop depending on card size\n\n        var moviePhoto = this.props.cardSize === 'large' ? this.props.data[i].backdrop_path : this.props.data[i].poster_path;\n        var tvPhoto = this.props.cardSize === ' large' ? this.props.data[i].backdrop_path : this.props.data[i].poster_path;\n        var LoadMoviePhoto = ismovieloading === true ? React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }) : imageUrl + moviePhoto; //putting everything together to display\n\n        switch (this.props.data[i].media_type) {\n          case 'movie':\n            results.push(React.createElement(Card, {\n              key: i,\n              className: this.props.cardSize + 'Card',\n              onClick: this.props.selected.bind(null, this.props.data[i]),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 71\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"CardMediaWrapper\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 74\n              },\n              __self: this\n            }, React.createElement(CardMedia, {\n              className: this.props.cardSize + 'CardMedia',\n              image: loadMoviePhoto,\n              title: this.props.data[i].title,\n              onLoad: isMovieLoading === false,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 75\n              },\n              __self: this\n            }), movieOverlay)));\n            break;\n\n          case 'tv':\n            results.push(React.createElement(Card, {\n              key: i,\n              className: this.props.cardSize + 'Card',\n              onClick: this.props.selected.bind(null, this.props.data[i]),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 87\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"CardMediaWrapper\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 90\n              },\n              __self: this\n            }, React.createElement(CardMedia, {\n              className: this.props.cardSize + 'CardMedia',\n              image: imageUrl + tvPhoto,\n              title: this.props.data[i].name,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 91\n              },\n              __self: this\n            }), tvOverlay)));\n            break;\n\n          case 'person':\n            results.push(React.createElement(Card, {\n              key: i,\n              className: this.props.cardSize + 'Card',\n              onClick: this.props.selected.bind(null, this.props.data[i]),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 102\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"CardMediaWrapper\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 105\n              },\n              __self: this\n            }, React.createElement(CardMedia, {\n              className: this.props.cardSize + 'CardMedia',\n              image: imageUrl + this.props.data[i].profile_path,\n              title: this.props.data[i].name,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 106\n              },\n              __self: this\n            }), personOverlay)));\n            break;\n\n          default:\n            results.push('');\n            break;\n        }\n\n        ;\n      }\n\n      return React.createElement(\"div\", {\n        className: this.props.styleProp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \" >\", results);\n    }\n  }]);\n\n  return CoverItems;\n}(Component);\n\nexport default CoverItems;","map":{"version":3,"sources":["/home/weston/Documents/movedb/Client/src/components/Common/coverItems.js"],"names":["React","Component","Card","CardMedia","CardContent","Typography","CoverItems","props","state","imageUrl","results","i","data","length","movieOverlay","overlay","title","tvOverlay","name","personOverlay","moviePhoto","cardSize","backdrop_path","poster_path","tvPhoto","LoadMoviePhoto","ismovieloading","media_type","push","selected","bind","loadMoviePhoto","isMovieLoading","profile_path","styleProp"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,WAA1B,EAAuCC,UAAvC,QAAwD,mBAAxD;AACA,OAAO,kBAAP;;IAEMC,U;;;;;AACF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE;AADD,KAAb;AAFe;AAKlB;;;;6BAEQ;AAAA,UAGGA,QAHH,GAGgB,KAAKD,KAHrB,CAGGC,QAHH;AAKL,UAAMC,OAAO,GAAG,EAAhB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,KAAL,CAAWK,IAAX,CAAgBC,MAApC,EAA4CF,CAAC,EAA7C,EAAiD;AAG7C;AACA,YAAMG,YAAY,GAAK,KAAKP,KAAL,CAAWQ,OAAZ,GACc,oBAAC,WAAD;AAAa,UAAA,SAAS,EAAC,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAG,UAAA,SAAS,EAAC,2BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,UAAD;AAAY,UAAA,OAAO,EAAC,OAApB;AAA4B,UAAA,SAAS,EAAC,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK,KAAKR,KAAL,CAAWK,IAAX,CAAgBD,CAAhB,EAAmBK,KADxB,CADJ,CAFJ,CADd,GAUU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAVhC;AAaA,YAAMC,SAAS,GAAI,KAAKV,KAAL,CAAWQ,OAAZ,GACc,oBAAC,WAAD;AAAa,UAAA,SAAS,EAAC,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAG,UAAA,SAAS,EAAC,wBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,UAAD;AAAY,UAAA,OAAO,EAAC,OAApB;AAA4B,UAAA,SAAS,EAAC,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK,KAAKR,KAAL,CAAWK,IAAX,CAAgBD,CAAhB,EAAmBO,IADxB,CADJ,CAFJ,CADd,GAUU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAV5B;AAaA,YAAMC,aAAa,GAAI,KAAKZ,KAAL,CAAWQ,OAAZ,GACU,oBAAC,WAAD;AAAa,UAAA,SAAS,EAAC,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAG,UAAA,SAAS,EAAC,4BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,UAAD;AAAY,UAAA,OAAO,EAAC,OAApB;AAA4B,UAAA,SAAS,EAAC,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK,KAAKR,KAAL,CAAWK,IAAX,CAAgBD,CAAhB,EAAmBO,IADxB,CADJ,CAFJ,CADV,GAUM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAV5B,CA9B6C,CA0C7C;;AACA,YAAME,UAAU,GAAI,KAAKb,KAAL,CAAWc,QAAX,KAAwB,OAAzB,GAAmC,KAAKd,KAAL,CAAWK,IAAX,CAAgBD,CAAhB,EAAmBW,aAAtD,GAAsE,KAAKf,KAAL,CAAWK,IAAX,CAAgBD,CAAhB,EAAmBY,WAA5G;AACA,YAAMC,OAAO,GAAI,KAAKjB,KAAL,CAAWc,QAAX,KAAwB,QAAzB,GAAoC,KAAKd,KAAL,CAAWK,IAAX,CAAgBD,CAAhB,EAAmBW,aAAvD,GAAuE,KAAKf,KAAL,CAAWK,IAAX,CAAgBD,CAAhB,EAAmBY,WAA1G;AAEA,YAAME,cAAc,GAAIC,cAAc,KAAK,IAApB,GAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA3B,GAAoCjB,QAAQ,GAAGW,UAAtE,CA9C6C,CAgD9C;;AACC,gBAAQ,KAAKb,KAAL,CAAWK,IAAX,CAAgBD,CAAhB,EAAmBgB,UAA3B;AACI,eAAK,OAAL;AACIjB,YAAAA,OAAO,CAACkB,IAAR,CAAa,oBAAC,IAAD;AAAM,cAAA,GAAG,EAAEjB,CAAX;AAAc,cAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWc,QAAX,GAAsB,MAA/C;AACc,cAAA,OAAO,EAAE,KAAKd,KAAL,CAAWsB,QAAX,CAAoBC,IAApB,CAAyB,IAAzB,EAA8B,KAAKvB,KAAL,CAAWK,IAAX,CAAgBD,CAAhB,CAA9B,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAGG;AAAK,cAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACI,oBAAC,SAAD;AACI,cAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWc,QAAX,GAAsB,WADrC;AAEI,cAAA,KAAK,EAAEU,cAFX;AAGI,cAAA,KAAK,EAAE,KAAKxB,KAAL,CAAWK,IAAX,CAAgBD,CAAhB,EAAmBK,KAH9B;AAII,cAAA,MAAM,EAAEgB,cAAc,KAAK,KAJ/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAOMlB,YAPN,CAHH,CAAb;AAcA;;AACJ,eAAK,IAAL;AACIJ,YAAAA,OAAO,CAACkB,IAAR,CAAa,oBAAC,IAAD;AAAM,cAAA,GAAG,EAAEjB,CAAX;AAAc,cAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWc,QAAX,GAAsB,MAA/C;AACW,cAAA,OAAO,EAAE,KAAKd,KAAL,CAAWsB,QAAX,CAAoBC,IAApB,CAAyB,IAAzB,EAA8B,KAAKvB,KAAL,CAAWK,IAAX,CAAgBD,CAAhB,CAA9B,CADpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAGG;AAAK,cAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACI,oBAAC,SAAD;AACI,cAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWc,QAAX,GAAsB,WADrC;AAEI,cAAA,KAAK,EAAEZ,QAAQ,GAAGe,OAFtB;AAGI,cAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWK,IAAX,CAAgBD,CAAhB,EAAmBO,IAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAMKD,SANL,CAHH,CAAb;AAaA;;AACJ,eAAK,QAAL;AACIP,YAAAA,OAAO,CAACkB,IAAR,CAAa,oBAAC,IAAD;AAAM,cAAA,GAAG,EAAEjB,CAAX;AAAc,cAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWc,QAAX,GAAsB,MAA/C;AACc,cAAA,OAAO,EAAE,KAAKd,KAAL,CAAWsB,QAAX,CAAoBC,IAApB,CAAyB,IAAzB,EAA8B,KAAKvB,KAAL,CAAWK,IAAX,CAAgBD,CAAhB,CAA9B,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAGG;AAAK,cAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACI,oBAAC,SAAD;AACI,cAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWc,QAAX,GAAsB,WADrC;AAEI,cAAA,KAAK,EAAEZ,QAAQ,GAAG,KAAKF,KAAL,CAAWK,IAAX,CAAgBD,CAAhB,EAAmBsB,YAFzC;AAGI,cAAA,KAAK,EAAE,KAAK1B,KAAL,CAAWK,IAAX,CAAgBD,CAAhB,EAAmBO,IAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAMKC,aANL,CAHH,CAAb;AAaA;;AACJ;AACIT,YAAAA,OAAO,CAACkB,IAAR,CAAa,EAAb;AACA;AAjDR;;AAkDC;AACJ;;AAGD,aACR;AAAK,QAAA,SAAS,EAAI,KAAKrB,KAAL,CAAW2B,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEKxB,OAFL,CADQ;AAQH;;;;EA9HoBT,S;;AAkIzB,eAAeK,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Card, CardMedia, CardContent, Typography} from '@material-ui/core';\nimport '../../style.scss';\n\nclass CoverItems extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            imageUrl: 'https://image.tmdb.org/t/p/w500',\n        };\n    }\n\n    render() {\n\n        \n        const { imageUrl } = this.state\n\n        const results = [];        \n\n        for (var i = 0; i < this.props.data.length; i++) {\n\n\n            // to show or not to show the overlay\n            const movieOverlay =  (this.props.overlay)?\n                                                <CardContent className='CardOverlay'> \n                                                    <i className=\"material-icons movieIcon \">movie</i>\n                                                    <div>\n                                                        <Typography variant=\"body1\" className='overlayText'>\n                                                            {this.props.data[i].title}\n                                                        </Typography>\n                                                    </div>\n                                                </CardContent>\n                                            :\n                                            <div/>\n\n\n            const tvOverlay = (this.props.overlay)?\n                                            <CardContent className='CardOverlay'> \n                                                <i className=\"material-icons tvIcon \">tv</i>\n                                                <div>\n                                                    <Typography variant=\"body1\" className='overlayText'>\n                                                        {this.props.data[i].name}\n                                                    </Typography>\n                                                </div>\n                                            </CardContent>\n                                        :\n                                        <div/>\n\n\n            const personOverlay = (this.props.overlay)?\n                                            <CardContent className='CardOverlay'> \n                                                <i className=\"material-icons personIcon \">person</i>\n                                                <div>\n                                                    <Typography variant=\"body1\" className='overlayText'>\n                                                        {this.props.data[i].name}\n                                                    </Typography>\n                                                </div>\n                                            </CardContent>\n                                        :\n                                        <div/>\n\n            // to display poster or backdrop depending on card size\n            const moviePhoto = (this.props.cardSize === 'large')? this.props.data[i].backdrop_path : this.props.data[i].poster_path\n            const tvPhoto = (this.props.cardSize === ' large')? this.props.data[i].backdrop_path : this.props.data[i].poster_path\n           \n            const LoadMoviePhoto = (ismovieloading === true)? <div/> : imageUrl + moviePhoto;\n\n           //putting everything together to display\n            switch (this.props.data[i].media_type) {\n                case 'movie':\n                    results.push(<Card key={i} className={this.props.cardSize + 'Card'}\n                                               onClick={this.props.selected.bind(null,this.props.data[i])} \n                                               >\n                                    <div className='CardMediaWrapper'>\n                                        <CardMedia\n                                            className={this.props.cardSize + 'CardMedia'}\n                                            image={loadMoviePhoto}\n                                            title={this.props.data[i].title}\n                                            onLoad={isMovieLoading === false}\n                                        />\n                                         {movieOverlay}\n                                    </div>\n                                </Card> \n                    );\n                    break;\n                case 'tv':\n                    results.push(<Card key={i} className={this.props.cardSize + 'Card'} \n                                            onClick={this.props.selected.bind(null,this.props.data[i])} \n                                            >\n                                    <div className='CardMediaWrapper'>\n                                        <CardMedia\n                                            className={this.props.cardSize + 'CardMedia'}\n                                            image={imageUrl + tvPhoto}\n                                            title={this.props.data[i].name}\n                                        />\n                                        {tvOverlay}\n                                    </div>\n                                </Card> \n                )\n                    break;\n                case 'person':\n                    results.push(<Card key={i} className={this.props.cardSize + 'Card'} \n                                               onClick={this.props.selected.bind(null,this.props.data[i])}\n                                                >\n                                    <div className='CardMediaWrapper'>\n                                        <CardMedia\n                                            className={this.props.cardSize + 'CardMedia'}\n                                            image={imageUrl + this.props.data[i].profile_path}\n                                            title={this.props.data[i].name}\n                                        />\n                                        {personOverlay}\n                                    </div>\n                                </Card> \n                    )\n                    break;\n                default:\n                    results.push('')\n                    break;\n            };\n        }\n\n\n        return (\n<div className = {this.props.styleProp}> >\n\n    {results}\n\n</div>\n\n        );\n    }\n}\n\n\nexport default CoverItems"]},"metadata":{},"sourceType":"module"}