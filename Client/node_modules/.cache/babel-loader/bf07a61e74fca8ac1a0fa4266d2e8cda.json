{"ast":null,"code":"import _classCallCheck from \"/home/weston/Documents/movedb/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/weston/Documents/movedb/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/weston/Documents/movedb/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/weston/Documents/movedb/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/weston/Documents/movedb/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/weston/Documents/movedb/Client/src/components/Common/coverItems.js\";\nimport React, { Component } from 'react';\nimport { Card, CardMedia, CardContent, Typography } from '@material-ui/core';\nimport '../../style.scss';\n\nvar CoverItems =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CoverItems, _Component);\n\n  function CoverItems(props) {\n    var _this;\n\n    _classCallCheck(this, CoverItems);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CoverItems).call(this, props));\n    _this.state = {\n      imageUrl: 'https://image.tmdb.org/t/p/w500'\n    };\n    return _this;\n  }\n\n  _createClass(CoverItems, [{\n    key: \"render\",\n    value: function render() {\n      var imageUrl = this.state.imageUrl;\n      var results = [];\n\n      for (var i = 0; i < this.props.data.length; i++) {\n        console.log(this.props.data[i].loading); // to show or not to show the overlay\n\n        var movieOverlay = this.props.overlay ? React.createElement(CardContent, {\n          className: \"CardOverlay\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"material-icons movieIcon \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, \"movie\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          variant: \"body1\",\n          className: \"overlayText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, this.props.data[i].title))) : React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        });\n        var tvOverlay = this.props.overlay ? React.createElement(CardContent, {\n          className: \"CardOverlay\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"material-icons tvIcon \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, \"tv\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          variant: \"body1\",\n          className: \"overlayText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, this.props.data[i].name))) : React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        });\n        var personOverlay = this.props.overlay ? React.createElement(CardContent, {\n          className: \"CardOverlay\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"material-icons personIcon \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, \"person\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          variant: \"body1\",\n          className: \"overlayText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, this.props.data[i].name))) : React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }); // to display poster or backdrop depending on card size\n\n        var moviePhotoUrl = this.props.cardSize === 'large' ? this.props.data[i].backdrop_path : this.props.data[i].poster_path;\n        var tvPhotoUrl = this.props.cardSize === ' large' ? this.props.data[i].backdrop_path : this.props.data[i].poster_path; // to display photo or loading card\n\n        var moviePhotoDisplay = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, React.createElement(CardMedia, {\n          className: this.props.cardSize + 'CardMedia',\n          image: imageUrl + moviePhotoUrl,\n          title: this.props.data[i].title,\n          onLoad: this.props.isImageLoaded(this.props.data[i].media_type, i, this.props.data[i].id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }), movieOverlay);\n        var tvPhotoDisplay = this.props.data[i].loading ? React.createElement(\"div\", {\n          className: this.props.cardSize + 'CardMedia',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }) : React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, React.createElement(CardMedia, {\n          className: this.props.cardSize + 'CardMedia',\n          image: imageUrl + tvPhotoUrl,\n          title: this.props.data[i].name,\n          onLoad: this.props.isImageLoaded(this.props.data[i].media_type, i, this.props.data[i].id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }), tvOverlay);\n        var personPhotoDisplay = this.props.data[i].loading ? React.createElement(\"div\", {\n          className: this.props.cardSize + 'CardMedia',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }) : React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, React.createElement(CardMedia, {\n          className: this.props.cardSize + 'CardMedia',\n          image: imageUrl + this.props.data[i].profile_path,\n          title: this.props.data[i].name,\n          onLoad: this.props.isImageLoaded(this.props.data[i].media_type, i, this.props.data[i].id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }), personOverlay); //putting everything together to display\n\n        switch (this.props.data[i].media_type) {\n          case 'movie':\n            results.push(React.createElement(Card, {\n              key: i,\n              className: this.props.cardSize + 'Card',\n              onClick: this.props.selected.bind(null, this.props.data[i]),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 108\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"CardMediaWrapper\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 111\n              },\n              __self: this\n            }, moviePhotoDisplay)));\n            break;\n\n          case 'tv':\n            results.push(React.createElement(Card, {\n              key: i,\n              className: this.props.cardSize + 'Card',\n              onClick: this.props.selected.bind(null, this.props.data[i]),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 118\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"CardMediaWrapper\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 121\n              },\n              __self: this\n            }, tvPhotoDisplay)));\n            break;\n\n          case 'person':\n            results.push(React.createElement(Card, {\n              key: i,\n              className: this.props.cardSize + 'Card',\n              onClick: this.props.selected.bind(null, this.props.data[i]),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 128\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"CardMediaWrapper\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 131\n              },\n              __self: this\n            }, personPhotoDisplay)));\n            break;\n\n          default:\n            results.push('');\n            break;\n        }\n\n        ;\n      }\n\n      return React.createElement(\"div\", {\n        className: this.props.styleProp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \" >\", results);\n    }\n  }]);\n\n  return CoverItems;\n}(Component);\n\nexport default CoverItems;","map":{"version":3,"sources":["/home/weston/Documents/movedb/Client/src/components/Common/coverItems.js"],"names":["React","Component","Card","CardMedia","CardContent","Typography","CoverItems","props","state","imageUrl","results","i","data","length","console","log","loading","movieOverlay","overlay","title","tvOverlay","name","personOverlay","moviePhotoUrl","cardSize","backdrop_path","poster_path","tvPhotoUrl","moviePhotoDisplay","isImageLoaded","media_type","id","tvPhotoDisplay","personPhotoDisplay","profile_path","push","selected","bind","styleProp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Card, CardMedia, CardContent, Typography} from '@material-ui/core';\nimport '../../style.scss';\n\nclass CoverItems extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            imageUrl: 'https://image.tmdb.org/t/p/w500',\n        };\n        \n    }\n\n    \n\n    render() {\n\n\n        const { imageUrl } = this.state\n\n        const results = [];        \n\n        for (var i = 0; i < this.props.data.length; i++) {\n            console.log(this.props.data[i].loading)\n            // to show or not to show the overlay\n            const movieOverlay =  (this.props.overlay)?\n                                                <CardContent className='CardOverlay'> \n                                                    <i className=\"material-icons movieIcon \">movie</i>\n                                                    <div>\n                                                        <Typography variant=\"body1\" className='overlayText'>\n                                                            {this.props.data[i].title}\n                                                        </Typography>\n                                                    </div>\n                                                </CardContent>\n                                            :\n                                            <div/>\n\n\n            const tvOverlay = (this.props.overlay)?\n                                            <CardContent className='CardOverlay'> \n                                                <i className=\"material-icons tvIcon \">tv</i>\n                                                <div>\n                                                    <Typography variant=\"body1\" className='overlayText'>\n                                                        {this.props.data[i].name}\n                                                    </Typography>\n                                                </div>\n                                            </CardContent>\n                                        :\n                                        <div/>\n\n\n            const personOverlay = (this.props.overlay)?\n                                            <CardContent className='CardOverlay'> \n                                                <i className=\"material-icons personIcon \">person</i>\n                                                <div>\n                                                    <Typography variant=\"body1\" className='overlayText'>\n                                                        {this.props.data[i].name}\n                                                    </Typography>\n                                                </div>\n                                            </CardContent>\n                                        :\n                                        <div/>\n\n            // to display poster or backdrop depending on card size\n            const moviePhotoUrl = (this.props.cardSize === 'large')? this.props.data[i].backdrop_path : this.props.data[i].poster_path\n            const tvPhotoUrl = (this.props.cardSize === ' large')? this.props.data[i].backdrop_path : this.props.data[i].poster_path\n           \n            // to display photo or loading card\n            const moviePhotoDisplay = \n                                                                    <div>\n                                                                        <CardMedia\n                                                                            className={this.props.cardSize + 'CardMedia'}\n                                                                            image ={ imageUrl + moviePhotoUrl }\n                                                                            title={this.props.data[i].title}\n                                                                            onLoad={this.props.isImageLoaded(this.props.data[i].media_type, i, this.props.data[i].id )}\n                                                                        /> \n                                                                        {movieOverlay}\n                                                                    </div>;\n\n\n            const tvPhotoDisplay = (this.props.data[i].loading)? <div className = {this.props.cardSize + 'CardMedia'} />\n                                                                :\n                                                                <div> \n                                                                    <CardMedia\n                                                                        className={this.props.cardSize + 'CardMedia'}\n                                                                        image ={ imageUrl + tvPhotoUrl }\n                                                                        title={this.props.data[i].name}\n                                                                        onLoad={this.props.isImageLoaded(this.props.data[i].media_type, i, this.props.data[i].id )}\n                                                                    /> \n                                                                    {tvOverlay}\n                                                                </div>;\n\n            const personPhotoDisplay = (this.props.data[i].loading)?   <div className = {this.props.cardSize + 'CardMedia'} />\n                                                                    :\n                                                                        <div> \n                                                                            <CardMedia\n                                                                            className={this.props.cardSize + 'CardMedia'}\n                                                                            image ={ imageUrl + this.props.data[i].profile_path }\n                                                                            title={this.props.data[i].name}\n                                                                            onLoad={this.props.isImageLoaded(this.props.data[i].media_type, i, this.props.data[i].id )}\n                                                                            /> \n                                                                            {personOverlay}\n                                                                        </div>;\n\n           //putting everything together to display\n            switch (this.props.data[i].media_type) {\n                case 'movie':\n                    results.push(<Card key={i} className={this.props.cardSize + 'Card'}\n                                               onClick={this.props.selected.bind(null,this.props.data[i])} \n                                               >\n                                    <div className='CardMediaWrapper'>\n                                        {moviePhotoDisplay}\n                                    </div>\n                                </Card> \n                    );\n                    break;\n                case 'tv':\n                    results.push(<Card key={i} className={this.props.cardSize + 'Card'} \n                                            onClick={this.props.selected.bind(null,this.props.data[i])} \n                                            >\n                                    <div className='CardMediaWrapper'>\n                                        {tvPhotoDisplay}\n                                    </div>\n                                </Card> \n                )\n                    break;\n                case 'person':\n                    results.push(<Card key={i} className={this.props.cardSize + 'Card'} \n                                               onClick={this.props.selected.bind(null,this.props.data[i])}\n                                                >\n                                    <div className='CardMediaWrapper'>\n                                        {personPhotoDisplay}\n                                    </div>\n                                </Card> \n                    )\n                    break;\n                default:\n                    results.push('')\n                    break;\n            };\n        }\n\n\n        return (\n<div className = {this.props.styleProp}> >\n\n    {results}\n\n</div>\n\n        );\n    }\n}\n\n\nexport default CoverItems"]},"metadata":{},"sourceType":"module"}